name: Âπ≥Êùø2Pro
on:
  workflow_dispatch:
    inputs:
      enable_feature_kpm:
        description: "KPM"
        required: false
        default: true
        type: boolean
      enable_feature_bbr:
        description: "BBR"
        required: false
        default: true
        type: boolean
      enable_feature_sched_ext:
        description: "È£éÈ©∞"
        required: false
        default: false
        type: boolean

jobs:
  build:
    name: Build_oneplus_pad_2_pro
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: üìä Ê£ÄÊü•Á£ÅÁõòÁ©∫Èó¥
        run: |
          echo "ÊûÑÂª∫ÂâçÁ£ÅÁõòÁ©∫Èó¥Ôºö"
          df -h

      - name: ‚öôÔ∏è ËÆæÁΩÆ cache Ë∑ØÂæÑ
        run: |
          echo "CCACHE_DIR=$HOME/.ccache_oneplus_pad_2_pro" >> $GITHUB_ENV

      - name: üì¶ ËÆæÁΩÆ‰∏ãËΩΩË¥¶Êà∑
        run: |
          git config --global user.name "MoranOrz"
          git config --global user.email "authorz@aliyun.com"

      - name: üõ† ÈÖçÁΩÆ APT ÁºìÂ≠ò
        run: |
          APT_CACHE_DIR="$HOME/apt-cache"
          mkdir -p "$APT_CACHE_DIR"/{archives,lists/partial}
          echo "Dir::Cache \"$APT_CACHE_DIR\";" | sudo tee /etc/apt/apt.conf.d/90user-cache
          echo "Dir::Cache::archives \"$APT_CACHE_DIR/archives\";" | sudo tee -a /etc/apt/apt.conf.d/90user-cache
          echo "Dir::State::lists \"$APT_CACHE_DIR/lists\";" | sudo tee -a /etc/apt/apt.conf.d/90user-cache
          echo "Acquire::Check-Valid-Until \"false\";" | sudo tee -a /etc/apt/apt.conf.d/90user-cache
          echo "Acquire::Languages \"none\";" | sudo tee -a /etc/apt/apt.conf.d/90user-cache
          sudo chown -R $USER:$USER "$APT_CACHE_DIR"

      - name: üõ† ÁºìÂ≠ò APT ÂåÖ
        uses: actions/cache@v3
        with:
          path: ${{ env.HOME }}/apt-cache
          key: ${{ runner.os }}-apt-${{ hashFiles('.github/workflows/build_ak3.yml') }}
          restore-keys: |
            ${{ runner.os }}-apt-

      - name: üì¶ ÂÆâË£Ö‰æùËµñ
        run: |
          sudo rm -f /var/lib/apt/lists/lock /var/lib/dpkg/lock
          APT_CACHE_DIR="$HOME/apt-cache"
          mkdir -p "$APT_CACHE_DIR/lists/partial"
          sudo apt -o Dir::Cache="$APT_CACHE_DIR" update -qq
          sudo DEBIAN_FRONTEND=noninteractive apt -o Dir::Cache="$APT_CACHE_DIR" install -yq --no-install-recommends \
            python3 git curl ccache libelf-dev \
            build-essential flex bison libssl-dev \
            libncurses-dev liblz4-tool zlib1g-dev \
            libxml2-utils rsync unzip gcc-aarch64-linux-gnu

          echo "‚úÖ ‰æùËµñÂÆâË£ÖÂÆåÊàê"

      - name: üì• ËΩΩÂÖ• ccache ÁºìÂ≠ò
        uses: actions/cache@v3
        with:
          path: ${{ env.CCACHE_DIR }}
          key: ccache-${{ runner.os }}-${{ github.ref }}-oneplus_pad_2_pro
          restore-keys: |
            ccache-${{ runner.os }}-oneplus_pad_2_pro-
            ccache-${{ runner.os }}-

      - name: üì• ÂàùÂßãÂåñ ccache
        run: |
          export CCACHE_COMPILERCHECK="%compiler% -dumpmachine; %compiler% -dumpversion"
          export CCACHE_NOHASHDIR="true"
          export CCACHE_HARDLINK="true"
          export CCACHE_DIR="${{ env.CCACHE_DIR }}"
          export CCACHE_MAXSIZE="8G"

          INIT_FLAG="$CCACHE_DIR/.ccache_initialized"
          if command -v ccache >/dev/null 2>&1; then
            if [ ! -f "$INIT_FLAG" ]; then
              echo "ÂàùÂßãÂåñ ccache ($CCACHE_DIR)..."
              mkdir -p "$CCACHE_DIR"
              ccache -M "$CCACHE_MAXSIZE"
              touch "$INIT_FLAG"
            else
              echo "ccache Â∑≤ÂàùÂßãÂåñÔºåË∑≥Ëøá"
            fi
          else
            echo "Êú™ÂÆâË£Ö ccacheÔºåË∑≥Ëøá"
          fi

      - name: üì• ‰∏ãËΩΩ repo
        run: |
          curl https://storage.googleapis.com/git-repo-downloads/repo > ~/repo
          chmod a+x ~/repo
          sudo mv ~/repo /usr/local/bin/repo

      - name: üì• ÂàùÂßãÂåñ repo Âπ∂ÂêåÊ≠•ÂÜÖÊ†∏Ê∫êÁ†Å
        run: |
          mkdir kernel_workspace && cd kernel_workspace
          repo init -u https://github.com/OnePlusOSS/kernel_manifest.git -b refs/heads/oneplus/sm8750 -m oneplus_pad_2_pro.xml --depth=1
          repo --trace sync -c -j$(nproc --all) --no-tags
          rm kernel_platform/common/android/abi_gki_protected_exports_* || echo "No protected exports!"
          rm kernel_platform/msm-kernel/android/abi_gki_protected_exports_* || echo "No protected exports!"

      - name: ‚öôÔ∏è ËÆæÁΩÆ SuKiSU Ultra
        run: |
          mkdir -p kernel_workspace/kernel_platform
          cd kernel_workspace/kernel_platform

          curl -LSs "https://raw.githubusercontent.com/SukiSU-Ultra/SukiSU-Ultra/main/kernel/setup.sh" | bash -s susfs-main

          cd KernelSU
          KSU_VERSION=$(expr $(/usr/bin/git rev-list --count main) "+" 10700)
          echo "KSUVER=$KSU_VERSION" >> $GITHUB_ENV
          export KSU_VERSION=$KSU_VERSION
          sed -i "s/DKSU_VERSION=12800/DKSU_VERSION=${KSU_VERSION}/" kernel/Makefile

      - name: üîß ÈÖçÁΩÆ susfs
        run: |
          cd kernel_workspace
          git clone https://gitlab.com/simonpunk/susfs4ksu.git -b gki-android15-6.6
          git clone https://github.com/SukiSU-Ultra/SukiSU_patch.git
          git clone https://github.com/MoranOrz/kernel_build_workflows.git lz4_patch

          cd kernel_platform
          cp ../susfs4ksu/kernel_patches/50_add_susfs_in_gki-android15-6.6.patch ./common/
          cp ../susfs4ksu/kernel_patches/fs/* ./common/fs/
          cp ../susfs4ksu/kernel_patches/include/linux/* ./common/include/linux/

          cp -r ../SukiSU_patch/other/zram/lz4k/include/linux/* ./common/include/linux
          cp -r ../SukiSU_patch/other/zram/lz4k/crypto/* ./common/crypto
          cp -r ../SukiSU_patch/other/zram/lz4k_oplus ./common/lib/

          # Apply patches
          cd ./common

          files=(
              "lib/lz4/lz4_compress.c"
              "lib/lz4/lz4_decompress.c"
              "lib/lz4/lz4defs.h"
              "lib/lz4/lz4hc_compress.c"
          )
          for file in "${files[@]}"; do
              if [ -e "$file" ]; then
                  rm "$file"
              fi
          done

          cp -r ../../lz4_patch/zram/lz4/* ./lib/lz4/
          cp -r ../../lz4_patch/zram/include/linux/* ./include/linux/
          cp -r ../../lz4_patch/zram/6.6/lz4_1.10.0.patch ./

          if ! patch -p1 -F 3 --fuzz=5 < lz4_1.10.0.patch; then
            echo "::error ::Failed to apply lz4_1.10.0.patch"
            exit 1
          fi

          if ! patch -p1 < 50_add_susfs_in_gki-android15-6.6.patch; then
            echo "::error ::Failed to apply 50_add_susfs_in_gki-android15-6.6.patch"
            exit 1
          fi

          cp ../../SukiSU_patch/hooks/syscall_hooks.patch ./
          if ! patch -p1 -F 3 < syscall_hooks.patch; then
            echo "::error ::Failed to apply syscall_hooks.patch"
            exit 1
          fi

          echo "ÂÆåÊàê patchs"

      - name: üîß ÁºìÂ≠ò HMBird Ë°•‰∏Å
        uses: actions/cache@v3
        with:
          path: ${{ runner.temp }}/hmbird_patch.c
          key: hmbird-patch-v1
          restore-keys: |
            hmbird-patch-v1

      - name: üîß Â∫îÁî® HMBird GKI Ë°•‰∏Å
        run: |
          PATCH_FILE="${{ runner.temp }}/hmbird_patch.c"
          if [ ! -f "$PATCH_FILE" ]; then
            if [ -f "${GITHUB_WORKSPACE}/hmbird_patch.c" ]; then
              echo "Âä†ËΩΩ HMBird Ë°•‰∏Å..."
              cp "${GITHUB_WORKSPACE}/hmbird_patch.c" "$PATCH_FILE"
            else
              echo "::error ::hmbird_patch.c not found in ${GITHUB_WORKSPACE}"
              exit 1
            fi
          fi

          cd kernel_workspace/kernel_platform/common/drivers
          cp "$PATCH_FILE" hmbird_patch.c

          if ! grep -q "hmbird_patch.o" Makefile; then
            echo "obj-y += hmbird_patch.o" >> Makefile
          fi
          echo "HMBird Ë°•‰∏ÅÂ∫îÁî®ÂÆåÊàê"

      - name: üîß ËÆæÁΩÆÁºñËØëÈÖçÁΩÆ
        env:
          ENABLE_BBR: ${{ github.event.inputs.enable_feature_bbr }}
        run: |
          cd kernel_workspace/kernel_platform
          echo "CONFIG_KSU=y" >> ./common/arch/arm64/configs/gki_defconfig
          # Add VFS configuration settings
          echo "CONFIG_KSU_SUSFS_SUS_SU=n" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_MANUAL_HOOK=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KPM=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_CRYPTO_LZ4=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_CRYPTO_LZ4HC=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_CRYPTO_LZ4KD=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_CRYPTO_ZSTD=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_F2FS_FS_COMPRESSION=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_F2FS_FS_LZ4=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_F2FS_FS_LZ4HC=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_F2FS_FS_ZSTD=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KERNEL_LZ4=y" >> ./common/arch/arm64/configs/gki_defconfig          
          # Add SUSFS configuration settings
          echo "CONFIG_KSU_SUSFS=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_HAS_MAGIC_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_PATH=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_KSU_DEFAULT_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_BIND_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_KSTAT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_OVERLAYFS=n" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_TRY_UMOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_TRY_UMOUNT_FOR_BIND_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SPOOF_UNAME=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_ENABLE_LOG=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_HIDE_KSU_SUSFS_SYMBOLS=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SPOOF_CMDLINE_OR_BOOTCONFIG=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_OPEN_REDIRECT=y" >> ./common/arch/arm64/configs/gki_defconfig
          # Add BBR
          if [ "$ENABLE_BBR" = "true" ]; then
            echo "CONFIG_TCP_CONG_ADVANCED=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_TCP_CONG_BBR=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_NET_SCH_FQ=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_TCP_CONG_BIC=n" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_TCP_CONG_CUBIC=n" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_TCP_CONG_WESTWOOD=n" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_TCP_CONG_HTCP=n" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_DEFAULT_TCP_CONG=bbr" >> ./common/arch/arm64/configs/gki_defconfig
          fi
          #Remove check_defconfig
          sudo sed -i 's/check_defconfig//' ./common/build.config.gki
          cd common
          git add -A && git commit -a -m "BUILD Kernel"

      - name: üîß ËÆæÁΩÆÂÜÖÊ†∏ÂêçÁß∞
        run: |
          cd kernel_workspace/kernel_platform        
          sudo sed -i "s/-4k/-android15-8-g302cb15749a8-ab13157299-4k/g" ./common/arch/arm64/configs/gki_defconfig
          sed -i 's/${scm_version}//' ./common/scripts/setlocalversion

      - name: üîß Add sched_ext (ÂÜôÂÖ•È£éÈ©∞Ë°•‰∏Å)
        if: ${{ github.event.inputs.enable_feature_sched_ext }}
        run: |
          cd kernel_workspace/kernel_platform/
          git clone https://github.com/HanKuCha/sched_ext.git
          cp -r ./sched_ext/* ./common/kernel/sched
          rm -rf ./sched_ext/.git
          cd common/kernel/sched

      - name: üî® Build Kernel (ÊûÑÂª∫ÂÜÖÊ†∏)
        run: |
          export PATH="/usr/lib/ccache:$PATH"
          CLANG_PATH="$GITHUB_WORKSPACE/kernel_workspace/kernel_platform/prebuilts/clang/host/linux-x86/clang-r510928/bin"
          RUSTC_PATH="$GITHUB_WORKSPACE/kernel_workspace/kernel_platform/prebuilts/rust/linux-x86/1.73.0b/bin/rustc"
          PAHOLE_PATH="$GITHUB_WORKSPACE/kernel_workspace/kernel_platform/prebuilts/kernel-build-tools/linux-x86/bin/pahole"

          if [ ! -d "$CLANG_PATH" ]; then
            echo "::error ::Clang toolchain not found at $CLANG_PATH"
            exit 1
          fi
          if [ ! -f "$RUSTC_PATH" ]; then
            echo "::error ::Rust compiler not found at $RUSTC_PATH"
            exit 1
          fi
          if [ ! -f "$PAHOLE_PATH" ]; then
            echo "::error ::Pahole not found at $PAHOLE_PATH"
            exit 1
          fi

          export PATH="$CLANG_PATH:$PATH"

          export CCACHE_COMPILERCHECK="%compiler% -dumpmachine; %compiler% -dumpversion"
          export CCACHE_NOHASHDIR="true"
          export CCACHE_HARDLINK="true"
          export CCACHE_DIR="${{ env.CCACHE_DIR }}"
          export CCACHE_MAXSIZE="8G"

          export KBUILD_BUILD_TIMESTAMP="Tue Mar 4 09:04:13 UTC 2025"

          sudo apt install -y libelf-dev

          cd kernel_workspace/kernel_platform/common
          mkdir -p out
          make -j$(nproc --all) LLVM=1 ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- CC="ccache clang" RUSTC="$RUSTC_PATH" PAHOLE="$PAHOLE_PATH" LD=ld.lld HOSTLD=ld.lld O=out KCFLAGS+=-O2  gki_defconfig

          if [ ! -f out/.config ]; then echo "::error ::.config not generated"; exit 1; fi

          make -j$(nproc --all) LLVM=1 ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- CC="ccache clang" RUSTC="$RUSTC_PATH" PAHOLE="$PAHOLE_PATH" LD=ld.lld HOSTLD=ld.lld O=out KCFLAGS+=-O2  Image

      - name: üì¶ Â∫îÁî® KPM
        if: ${{ github.event.inputs.enable_feature_kpm }}
        run: |
          cd kernel_workspace/kernel_platform/common/out/arch/arm64/boot
          curl -LO https://github.com/SukiSU-Ultra/SukiSU_patch/raw/refs/heads/main/kpm/patch_linux
          chmod +x patch_linux
          ./patch_linux
          rm -f Image
          mv oImage Image

      - name: üì¶ ÊûÑÂª∫ AnyKernel3 ÂéãÁº©ÂåÖ
        run: |
          git clone https://github.com/Kernel-SU/AnyKernel3.git --depth=1      
          if [ ! -d "./AnyKernel3" ]; then
            echo "::error ::Failed to clone AnyKernel3 repository"
            exit 1
          fi
          rm -rf ./AnyKernel3/.git
          rm -rf ./AnyKernel3/push.sh
          cp kernel_workspace/kernel_platform/common/out/arch/arm64/boot/Image ./AnyKernel3/

      - name: üì§ ‰∏ä‰º† AnyKernel3 ÂéãÁº©ÂåÖ
        uses: actions/upload-artifact@v4
        with:
          name: AK3_${{ github.event.inputs.enable_feature_kpm == 'true' && '_KPM' || '_NoKPM' }}_${{ env.KSUVER }}_oneplus_pad_2_pro_SuKiSU
          path: ./AnyKernel3/*
